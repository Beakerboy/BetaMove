import numpy as np
import pandas as pd
import pickle
import preprocessing_helper as helper

from pathlib import Path
import constants
import json 
from genson import SchemaBuilder

with open(constants.SCRAPE_DATA_PATH, 'rb') as f:
    MoonBoard_2016_raw = pickle.load(f)
def dump_to_json():
  with open(constants.DATA_DIR / 'MoonBoard_2016_raw.json', 'w') as f:
    json.dump(MoonBoard_2016_raw, f)
    
def generate_schema():
  builder = SchemaBuilder()
  builder.add_object(list(MoonBoard_2016_raw.values()))
  builder.to_schema()

  with open(constants.DATA_DIR / 'MoonBoard_2016_raw_schema.json', 'w') as f:
    json.dump(builder.to_schema(), f)

features = pd.read_csv(constants.HOLD_FEATURES_PATH, dtype=str)

# convert features from pd dataframe to dictionary
feature_dict = {}
for index in features.index:
    feature_item = features.loc[index]
    feature_dict[(int(feature_item['X_coord']), int(feature_item['Y_coord']))] = np.array(
        list(feature_item['Difficulties'])).astype(int)
grade_map = helper.get_grade_map()
save_path = constants.PREPROCESSING_DIR / 'processed_data_xy_mode'
# TODO: fix see above
output_xy_mode = helper.classify_and_reorganize_data(MoonBoard_2016_raw, save_path, feature_dict, delta_xy_mode = False)

# load the data meant to be generated by the previous step
raw_data_forseq_path = constants.PREPROCESSING_DIR / 'processed_data_xy_mode'
with open(raw_data_forseq_path, 'rb') as f:
    MoonBoard_2016_raw_forseq = pickle.load(f)

X_dict_merge = {**MoonBoard_2016_raw_forseq['X_dict_benchmark_withgrade'], 
                **MoonBoard_2016_raw_forseq['X_dict_benchmark_nograde'], 
                **MoonBoard_2016_raw_forseq['X_dict_withgrade'], 
                **MoonBoard_2016_raw_forseq['X_dict_nograde']}
Y_dict_merge = {**MoonBoard_2016_raw_forseq['Y_dict_benchmark_withgrade'], 
                **MoonBoard_2016_raw_forseq['Y_dict_benchmark_nograde'], 
                **MoonBoard_2016_raw_forseq['Y_dict_withgrade'], 
                **MoonBoard_2016_raw_forseq['Y_dict_nograde']}
save_path_seq = constants.PREPROCESSING_DIR / 'processed_data_seq'
# TODO: currently broken, sequence data no longer contains successScoreSequence?
output_seq = helper.generate_organized_sequence_data(raw_data = X_dict_merge, save_path = save_path_seq)
sequence = helper.load_pickle(save_path_seq)
